{"version":3,"sources":["elements/TypingDots/typingdots.jsx","container/message/message.jsx","elements/Transition/transition.jsx","messages.js","container/wishings/wishings.jsx","container/footer/footer.jsx","App.js","serviceWorker.js","index.js"],"names":["TypingDots","className","id","Component","Message","this","props","message","Transition","state","start","date","Date","getTime","clearInterval","timerID","setInterval","tick","setState","show","bottom","delay","distance","left","Messages","emoji","Wishings","map","key","Footer","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"sQAgBeA,E,uKAZX,OACE,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,cACb,0BAAMC,GAAG,MACT,0BAAMA,GAAG,MACT,0BAAMA,GAAG,Y,GAPMC,aCaVC,E,uKAXX,OACE,yBACEF,GAAIG,KAAKC,MAAMJ,GACfD,UAAW,4BAA8BI,KAAKC,MAAMJ,IAEpD,yBAAKD,UAAU,WAAf,IAA2BI,KAAKC,MAAMC,c,GAPxBJ,aCgDPK,E,kDA1Cb,WAAYF,GAAQ,IAAD,8BACjB,cAAMA,IACDG,MAAQ,CAAEC,MAAOJ,EAAMI,MAAOC,MAAM,IAAIC,MAAOC,WAFnC,E,mEAMjBC,cAAcT,KAAKU,W,0CAGA,IAAD,OAClBV,KAAKU,QAAUC,aAAY,kBAAM,EAAKC,SAAQ,O,6BAI9CZ,KAAKa,SAAS,CACZP,MAAM,IAAIC,MAAOC,c,+BAKnB,IAAIM,EAMJ,OAJEA,EADEd,KAAKI,MAAME,KAAON,KAAKI,MAAMC,MAAQ,KAMvC,yBAAKT,UAAU,cACb,kBAAC,OAAD,CAAMmB,QAAM,EAACC,MAAOhB,KAAKC,MAAMe,MAAOC,SAAU,QAC7CH,EACC,kBAAC,EAAD,MAEA,kBAAC,SAAD,CAAQI,MAAI,EAACD,SAAU,QACrB,kBAAC,EAAD,CAASpB,GAAIG,KAAKC,MAAMJ,GAAIK,QAASF,KAAKC,MAAMC,iB,GAlCrCJ,a,gBCLnBqB,EAAW,CACf,CACEtB,GAAI,IACJQ,OAAO,IAAIE,MAAOC,UAClBN,QAASkB,IAAM,2BACfJ,MAAO,GAET,CACEnB,GAAI,IACJQ,OAAO,IAAIE,MAAOC,UAAY,KAC9BN,QAASkB,IACP,4FAEFJ,MAAO,MAET,CACEnB,GAAI,IACJQ,OAAO,IAAIE,MAAOC,UAAY,KAC9BN,QAASkB,IACP,mFAEFJ,MAAO,MAET,CACEnB,GAAI,IACJQ,OAAO,IAAIE,MAAOC,UAAY,KAC9BN,QAASkB,IACP,yEAEFJ,MAAO,MAET,CACEnB,GAAI,IACJQ,OAAO,IAAIE,MAAOC,UAAY,KAC9BN,QAAS,uBACTc,MAAO,MAET,CACEnB,GAAI,IACJQ,OAAO,IAAIE,MAAOC,UAAY,MAC9BN,QAAS,yCACTc,MAAO,QClBIK,E,uKAlBX,OACE,yBAAKzB,UAAU,gBACZuB,EAASG,KAAI,SAACpB,GACb,OACE,kBAAC,EAAD,CACEqB,IAAKrB,EAAQL,GACbA,GAAIK,EAAQL,GACZQ,MAAOH,EAAQG,MACfH,QAASA,EAAQA,QACjBc,MAAOd,EAAQc,gB,GAXNlB,aCFR,SAAS0B,IACtB,OACE,yBAAK5B,UAAU,cACb,yBAAKA,UAAU,eAAewB,IAAM,4CCU3BK,MAXf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAK7B,GAAG,YACN,kBAAC,EAAD,CAAUQ,OAAO,IAAIE,MAAOC,aAE9B,kBAACgB,EAAD,QCCcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAM1C,c","file":"static/js/main.b0737a40.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass TypingDots extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"typing-dots-box\">\r\n        <div className=\"typingdots\">\r\n          <span id=\"1\"></span>\r\n          <span id=\"2\"></span>\r\n          <span id=\"3\"></span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TypingDots;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Message extends Component {\r\n  render() {\r\n    return (\r\n      <div\r\n        id={this.props.id}\r\n        className={\" message-div message-div-\" + this.props.id}\r\n      >\r\n        <div className=\"message\"> {this.props.message}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Message;\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Fade, Bounce } from \"react-reveal\";\r\n\r\nimport TypingDots from \"../TypingDots/typingdots.jsx\";\r\nimport Message from \"../../container/message/message.jsx\";\r\n\r\nclass Transition extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { start: props.start, date: new Date().getTime() };\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timerID = setInterval(() => this.tick(), 100);\r\n  }\r\n\r\n  tick() {\r\n    this.setState({\r\n      date: new Date().getTime(),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let show;\r\n    if (this.state.date < this.state.start + 1800) {\r\n      show = true;\r\n    } else {\r\n      show = false;\r\n    }\r\n    return (\r\n      <div className=\"transition\">\r\n        <Fade bottom delay={this.props.delay} distance={\"20px\"}>\r\n          {show ? (\r\n            <TypingDots />\r\n          ) : (\r\n            <Bounce left distance={\"20px\"}>\r\n              <Message id={this.props.id} message={this.props.message} />\r\n            </Bounce>\r\n          )}\r\n        </Fade>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Transition;\r\n","import emoji from \"react-easy-emoji\";\r\n\r\nconst Messages = [\r\n  {\r\n    id: \"1\",\r\n    start: new Date().getTime(),\r\n    message: emoji(\"Hi, there! üëã\"),\r\n    delay: 0,\r\n  },\r\n  {\r\n    id: \"2\",\r\n    start: new Date().getTime() + 2200,\r\n    message: emoji(\r\n      \"So you have finally grown one year older but you have the brains of a child üòÇ\"\r\n    ),\r\n    delay: 2200,\r\n  },\r\n  {\r\n    id: \"3\",\r\n    start: new Date().getTime() + 4200,\r\n    message: emoji(\r\n      \"What would you like for a gift... face mask üò∑ or glovesüß§?\"\r\n    ),\r\n    delay: 4200,\r\n  },\r\n  {\r\n    id: \"4\",\r\n    start: new Date().getTime() + 6200,\r\n    message: emoji(\r\n      \"Anyways keeping that aside, a very happy birthday to you üéÇ\"\r\n    ),\r\n    delay: 6200,\r\n  },\r\n  {\r\n    id: \"5\",\r\n    start: new Date().getTime() + 8200,\r\n    message: \"Have a blast! ‚ú®\",\r\n    delay: 8200,\r\n  },\r\n  {\r\n    id: \"6\",\r\n    start: new Date().getTime() + 10200,\r\n    message: \"Jainam. üë®‚Äçüíª\",\r\n    delay: 10200,\r\n  },\r\n];\r\n\r\nexport { Messages };\r\n","import React, { Component } from \"react\";\r\n\r\nimport Transition from \"../../elements/Transition/transition.jsx\";\r\nimport { Messages } from \"../../messages.js\";\r\n\r\nclass Wishings extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"wishings-div\">\r\n        {Messages.map((message) => {\r\n          return (\r\n            <Transition\r\n              key={message.id}\r\n              id={message.id}\r\n              start={message.start}\r\n              message={message.message}\r\n              delay={message.delay}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Wishings;\r\n","import React from \"react\";\r\nimport emoji from \"react-easy-emoji\";\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <div className=\"footer-div\">\r\n      <div className=\"footer-text\">{emoji(\"Made with ü§ç by Jainam Desai\")}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Wishings from \"./container/wishings/wishings.jsx\";\r\nimport Footer from \"./container/footer/footer.jsx\";\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <div id=\"wishings\">\r\n        <Wishings start={new Date().getTime()} />\r\n      </div>\r\n      <Footer />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}